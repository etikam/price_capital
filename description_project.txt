from django.contrib import admin

# Register your models here.

from django.apps import AppConfig


class AppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'app'

from django.db import models

# Create your models here.

from django.test import TestCase

# Create your tests here.

from django.urls import path
from app import views
name="app"
urlpatterns = [
    path('', views.index, name="home")
]

from django.shortcuts import render

# Create your views here.


def index(request):
    
    return render(request,"app/home/index.html")


"""
ASGI config for config project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

application = get_asgi_application()

"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

AUTH_USER_MODEL = "users.User"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-z2iuwmqjaf=2%pt5mzqle)p$-&-066d6&y!gdiq884=$!0)kx&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app',
    'users',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



#Email Sending configuration
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"  
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = "etiennedheleine2000@gmail.com"
EMAIL_HOST_PASSWORD = "imhk nixo ptse qphn"


DOMAIN_URL = "127.0.0.1:8000" #un domaine de developpement que je dois changer en production

"""
URL configuration for config project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path("",include('app.urls')),
    path("auth/",include('users.urls')),
]

"""
WSGI config for config project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

application = get_wsgi_application()


from django.template import Library

register = Library()


# un filtre personnalisé pour vidé les champs invalides en maintenir les champs valide en cas de ValidationError
def default_if_none(value):
    return value if value else ''

register.filter('default_if_none', default_if_none)


from django.core.mail import send_mail
from django.template.loader import render_to_string
from django.utils.http import urlsafe_base64_encode
from django.utils.encoding import force_bytes
from django.contrib.auth.tokens import default_token_generator
from django.conf import settings


def send_activation_email(user):
    subject = "Activation de votre compte"
    uid = urlsafe_base64_encode(force_bytes(user.id))
    token = default_token_generator.make_token(user)
    message = render_to_string(
        'registration/activation_email.html', {
            'user': user,
            'uid': uid,
            'token': token,
            'domain': settings.DOMAIN_URL
        }
    )
    
    send_mail(
        subject, message,
        'etiennedheleine2000@gmail.com',
        [user.email],
        fail_silently=True
    )


from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from .models import User, PhysicalPerson, MoralPerson


@admin.register(User)
class UserAdmin(UserAdmin):
    fieldsets = (
        (None, {"fields": ("email", "password")}),
        ("Permissions", {"fields": ("is_active", "is_staff", "is_superuser", "groups", "user_permissions")}),
        ("Important dates", {"fields": ("last_login", "date_joined")}),
    )
    add_fieldsets = (
        (None, {
            "classes": ("wide",),
            "fields": ("email", "password1", "password2", "is_staff", "is_active"),
        }),
    )
    list_display = ("email", "is_staff", "is_active", "is_superuser")
    search_fields = ("email",)
    ordering = ("email",)
    
    
@admin.register(PhysicalPerson)
class PhysicalPersonAdmin(admin.ModelAdmin):
    list_display = ('first_name', 'last_name', 'telephone', 'user')

@admin.register(MoralPerson)
class MoralPersonAdmin(admin.ModelAdmin):
    list_display = ('company_name', 'telephone', 'user')

from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'

from django.contrib.auth.backends import ModelBackend

from users.models import User


class CustomAuthentication(ModelBackend):
    def authenticate(self, request, username, password):
        try:
            user = User.objects.get(email=username)
        except User.DoesNotExist:
            return None
        if user.check_password(password):
            request.user = user
            return user
        return None

from django import forms
from django.core.exceptions import ValidationError
from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth import authenticate
from django.core.exceptions import ValidationError

from .models import User
from .utils.mailing import send_activation_email


class CustomAuthenticationForm(AuthenticationForm):
    def clean(self):
        username = self.cleaned_data.get('username')
        password = self.cleaned_data.get('password')

        user = authenticate(
            self.request, username=username, password=password
        )
        if user is None:
            raise ValidationError(
                "Email ou Mot de passe incorrect."
            )
        if not user.is_active:
            send_activation_email(user)
            raise ValidationError(
                ("Votre compte n'est pas actif, consulter votre boite "
                    "email pour activer votre compte")
            )
        return self.cleaned_data


class CustomUserCreationForm(UserCreationForm):
    email = forms.EmailField(
        required=True,
        help_text="Requis. Entrez une adresse email valide."
    )

    class Meta:
        model = User
        fields = ('email','password1', 'password2')

    def clean_email(self):
        email = self.cleaned_data.get('email')
        if User.objects.filter(email=email).exists():
            raise ValidationError("Cette adresse email existe deja.")
        return email

# from django import forms
# from django.contrib.auth.forms import UserCreationForm
# from .models import User

# class UserRegistrationForm(UserCreationForm):

#     email = forms.EmailField(required=True, help_text="Une adresse email valide est requise.")

#     class Meta:
#         model = User
#         fields = ("email", "password1", "password2")

from django import forms
from django.core.exceptions import ValidationError
from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth import authenticate
from django.core.exceptions import ValidationError

from .models import User
from .utils.mailing import send_activation_email


class CustomAuthenticationForm(AuthenticationForm):
    def clean(self):
        username = self.cleaned_data.get('username')
        password = self.cleaned_data.get('password')

        user = authenticate(
            self.request, username=username, password=password
        )
        if user is None:
            raise ValidationError(
                "Email ou Mot de passe incorrect."
            )
        if not user.is_active:
            send_activation_email(user)
            raise ValidationError(
                ("Votre compte n'est pas actif, consulter votre boite "
                    "email pour activer votre compte")
            )
        return self.cleaned_data


class CustomUserCreationForm(UserCreationForm):
    email = forms.EmailField(
        required=True,
        help_text="Requis. Entrez une adresse email valide."
    )

    class Meta:
        model = User
        fields = ('email','password1', 'password2')

    def clean_email(self):
        email = self.cleaned_data.get('email')
        if User.objects.filter(email=email).exists():
            raise ValidationError("Cette adresse email existe deja.")
        return email

from django.contrib.auth.models import BaseUserManager


class UserManager(BaseUserManager):
    #en creant un utilisateur, il faudrait que je n'oublie pas de passer son rol en parametrre de create_user
    def create_user(self, email, password=None, role='PHYSICAL', **extra_fields):

        if not email:
            raise ValueError('L\'adresse email doit être renseignée.')
        email = self.normalize_email(email)
        user = self.model(email=email, role=role, **extra_fields)
        user.set_password(password)
        user.is_active = False #je le desactive jusqu'à ce qu'il valide son mail
        user.save(using=self._db)
        
    #creating profile with different roles 
        from .models import PhysicalPerson, MoralPerson
        if role == 'PHYSICAL':
            PhysicalPerson.objects.create(user=user)
        elif role == 'MORAL':
            MoralPerson.objects.create(user=user)
        
        return user

    def create_superuser(self, email, password=None, **extra_fields):

        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)

        return self.create_user(email, password, role='ADMIN', **extra_fields)

from django.contrib.auth.models import AbstractUser
from django.db import models
from .managers import UserManager
from django.utils import timezone
from django.conf import settings

class User(AbstractUser):
    first_name = None
    last_name = None
    username = None
    email = models.EmailField(unique=True, max_length=255, verbose_name="email address")

    ROLE_CHOICES = [
        ('PHYSICAL', 'Personne Physique'),
        ('MORAL', 'Personne Morale'),
        ('INVESTOR', 'Investisseur'),
        ('ADMIN', 'Administrateur'),
    ]
    role = models.CharField(max_length=10, choices=ROLE_CHOICES, default='PHYSICAL')

    objects = UserManager()

    EMAIL_FIELD = "email"
    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = []

    def __str__(self):
        return self.email


class MoralPerson(models.Model):
    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="moral_person")
    company_name = models.CharField(max_length=255)
    telephone = models.CharField(max_length=15)
    adresse = models.TextField()
    rccm = models.CharField(max_length=100, unique=True, blank=True, null=True) 
    logo = models.ImageField(upload_to="company_logos/")
    
    def __str__(self):
        return self.company_name


class PhysicalPerson(models.Model):
    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="physical_person")
    first_name = models.CharField(max_length=255)
    last_name = models.CharField(max_length=255)
    telephone = models.CharField(max_length=15)
    adresse = models.TextField()
    birthday = models.DateField()
    id_card = models.ImageField(upload_to="id_cards/")
    photo = models.ImageField(upload_to="profile_photos/")

    def __str__(self):
        return f"{self.first_name} {self.last_name}"

from django.test import TestCase

# Create your tests here.

from django.urls import path, include
from users.views import CustomLoginView
from users.views import CustomUserCreationView
from users.views import ActivationUserView
from users.views import ProfileUserView
from users.views import LogoutView

urlpatterns = [
    path('profile', ProfileUserView.as_view(), name='profile_user'),
    path('login/', CustomLoginView.as_view(), name='login'),
    path('create/', CustomUserCreationView.as_view(), name='register'),
    path('activation/<uid>/<token>', ActivationUserView.as_view(), name='confirm_user_activation'),
    path('logout/', LogoutView.as_view(), name='logout'),
    path('', include('django.contrib.auth.urls')),
]

from django.contrib.auth.views import LoginView
from django.views.generic.edit import CreateView, View
from django.views.generic import ListView
from django.urls import reverse_lazy
from django.shortcuts import redirect, render
from django.utils.http import urlsafe_base64_decode
from django.contrib import messages
from django.db import transaction
from django.contrib.auth.tokens import default_token_generator
from django.contrib.auth import logout

from .forms import CustomAuthenticationForm
from .forms import CustomUserCreationForm
from users.models import User
from .utils.mailing import send_activation_email


class CustomLoginView(LoginView):
    authentication_form = CustomAuthenticationForm


class CustomUserCreationView(CreateView):
    template_name = 'registration/register.html'
    form_class = CustomUserCreationForm
    success_url = reverse_lazy('register')

    def form_valid(self, form):
        with transaction.atomic():
            user = form.save(commit=False)
            user.is_active = False
            user.save()
            send_activation_email(user)
        messages.success(
            self.request,
            ("Votre compte compte a ete cree, consulter "
                "votre boite email pour activer votre compte")
        )
        return redirect(self.success_url)


class ActivationUserView(View):
    login_url = reverse_lazy('login')

    def get(self, request, uid, token):
        id = urlsafe_base64_decode(uid)
        try:
            user = User.objects.get(id=id)
        except User.DoesNotExist:
            return render(request, 'registration/activation_invalid.html')

        if default_token_generator.check_token(user, token):
            user.is_active = True
            user.save()
            messages.success(
                self.request,
                "Votre compte a ete active. Vous pouvez vous connecter "
            )
            return redirect(self.login_url)
        return render(request, 'registration/activation_invalid.html')



class ProfileUserView(ListView):
    template_name = 'registration/user_profile.html'
    model = User


class LogoutView(View):
    login_url = reverse_lazy('login')

    def get(self, request):
        logout(request)
        messages.success(
            self.request,
            "Votre a ete deconnecte"
        )
        return redirect(self.login_url)


#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

